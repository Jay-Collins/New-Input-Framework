//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input and ActionMaps/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""GeneralActions"",
            ""id"": ""dc09ac23-59bc-44c8-8579-6eab6693e29b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""696212f7-43b6-4c5b-a4b4-f3f183ee4c64"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f097298a-7cce-40f9-8c54-af52192b3657"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ebeaca0f-a45f-4304-84ce-3366816cce36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dc132fe7-bfe0-4cc6-8f9a-2139f3805f1f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8884cfa-8e4c-4883-852a-ef94d2c6d797"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbd96dd0-a201-48d4-b407-762993426f82"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9e7ade35-6cd3-476c-8168-3c9fc71022c3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4c51e461-66a1-4c9c-8838-10368648848f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9b69256-80d3-420a-a3af-8c80725ad7d6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccf38401-736b-498b-990b-8719246bd806"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=0.6,pressPoint=0.4),Tap(duration=0.399,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""bbbf7012-47b1-49e3-a686-13947a40f3da"",
            ""actions"": [
                {
                    ""name"": ""FlyUp"",
                    ""type"": ""Button"",
                    ""id"": ""c62104a4-a9e8-4190-9262-67421768223a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyDown"",
                    ""type"": ""Button"",
                    ""id"": ""bea21d5f-e1ab-4c40-b397-3cf9a701a8cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fb3bf81-777d-4b36-8e67-50cf83f718d8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac70069d-a2a0-4f09-9758-7924ecb79a32"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""2b45b477-e6b5-418a-a361-1f078c65f004"",
            ""actions"": [
                {
                    ""name"": ""LiftUp"",
                    ""type"": ""Button"",
                    ""id"": ""08ac2dd3-127a-4ad3-ace9-f4817fbf5bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LiftDown"",
                    ""type"": ""Button"",
                    ""id"": ""33ea0657-5ed9-4dea-a76d-9968461af613"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70845c2b-10ba-4c61-a891-cefee0b9d8a9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ee3a8cb-9d93-4df0-ab6e-c7a4a4a79149"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GeneralActions
        m_GeneralActions = asset.FindActionMap("GeneralActions", throwIfNotFound: true);
        m_GeneralActions_Movement = m_GeneralActions.FindAction("Movement", throwIfNotFound: true);
        m_GeneralActions_Cancel = m_GeneralActions.FindAction("Cancel", throwIfNotFound: true);
        m_GeneralActions_Interact = m_GeneralActions.FindAction("Interact", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_FlyUp = m_Drone.FindAction("FlyUp", throwIfNotFound: true);
        m_Drone_FlyDown = m_Drone.FindAction("FlyDown", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_LiftUp = m_Forklift.FindAction("LiftUp", throwIfNotFound: true);
        m_Forklift_LiftDown = m_Forklift.FindAction("LiftDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GeneralActions
    private readonly InputActionMap m_GeneralActions;
    private IGeneralActionsActions m_GeneralActionsActionsCallbackInterface;
    private readonly InputAction m_GeneralActions_Movement;
    private readonly InputAction m_GeneralActions_Cancel;
    private readonly InputAction m_GeneralActions_Interact;
    public struct GeneralActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public GeneralActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GeneralActions_Movement;
        public InputAction @Cancel => m_Wrapper.m_GeneralActions_Cancel;
        public InputAction @Interact => m_Wrapper.m_GeneralActions_Interact;
        public InputActionMap Get() { return m_Wrapper.m_GeneralActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActionsActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActionsActions instance)
        {
            if (m_Wrapper.m_GeneralActionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnMovement;
                @Cancel.started -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnCancel;
                @Interact.started -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GeneralActionsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_GeneralActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public GeneralActionsActions @GeneralActions => new GeneralActionsActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_FlyUp;
    private readonly InputAction m_Drone_FlyDown;
    public struct DroneActions
    {
        private @PlayerInputActions m_Wrapper;
        public DroneActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlyUp => m_Wrapper.m_Drone_FlyUp;
        public InputAction @FlyDown => m_Wrapper.m_Drone_FlyDown;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @FlyUp.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUp;
                @FlyUp.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUp;
                @FlyUp.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUp;
                @FlyDown.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyDown;
                @FlyDown.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyDown;
                @FlyDown.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyDown;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FlyUp.started += instance.OnFlyUp;
                @FlyUp.performed += instance.OnFlyUp;
                @FlyUp.canceled += instance.OnFlyUp;
                @FlyDown.started += instance.OnFlyDown;
                @FlyDown.performed += instance.OnFlyDown;
                @FlyDown.canceled += instance.OnFlyDown;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_LiftUp;
    private readonly InputAction m_Forklift_LiftDown;
    public struct ForkliftActions
    {
        private @PlayerInputActions m_Wrapper;
        public ForkliftActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LiftUp => m_Wrapper.m_Forklift_LiftUp;
        public InputAction @LiftDown => m_Wrapper.m_Forklift_LiftDown;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @LiftUp.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftUp.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftUp.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftDown.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
                @LiftDown.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
                @LiftDown.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LiftUp.started += instance.OnLiftUp;
                @LiftUp.performed += instance.OnLiftUp;
                @LiftUp.canceled += instance.OnLiftUp;
                @LiftDown.started += instance.OnLiftDown;
                @LiftDown.performed += instance.OnLiftDown;
                @LiftDown.canceled += instance.OnLiftDown;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IGeneralActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnFlyUp(InputAction.CallbackContext context);
        void OnFlyDown(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnLiftUp(InputAction.CallbackContext context);
        void OnLiftDown(InputAction.CallbackContext context);
    }
}
